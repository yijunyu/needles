# automatically generated by the FlatBuffers compiler, do not modify

# namespace: _needle

import flatbuffers

class Sequences(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSequences(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sequences()
        x.Init(buf, n + offset)
        return x

    # Sequences
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Sequences
    def Kind(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Sequences
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Sequences
    def Seq(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Seq import Seq
            obj = Seq()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Sequences
    def SeqLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def SequencesStart(builder): builder.StartObject(3)
def SequencesAddKind(builder, kind): builder.PrependInt32Slot(0, kind, 0)
def SequencesAddId(builder, id): builder.PrependInt32Slot(1, id, 0)
def SequencesAddSeq(builder, seq): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(seq), 0)
def SequencesStartSeqVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SequencesEnd(builder): return builder.EndObject()
